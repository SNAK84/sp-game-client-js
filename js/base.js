const MS_PER_HOUR = 3600000;

setInterval(() => {
    document.dispatchEvent(new Event("GameTick"));
}, 1000);

const Data = {

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: 'none' | 'session' | 'local'
    storageMode: 'session',
    tokenStorageKey: 'sp_token',
    modeStorageKey: 'sp_mode',

    // üîπ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    getStorage() {
        if (this.storageMode === 'local') return window?.localStorage || null;
        if (this.storageMode === 'session') return window?.sessionStorage || null;
        return null; // 'none'
    },

    // üîπ –†–∞–±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
    get token() {
        const storage = this.getStorage();
        if (!storage) return null;
        try {
            return storage.getItem(this.tokenStorageKey);
        } catch (e) {
            console.warn("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è token:", e);
            return null;
        }
    },

    set token(token) {
        const storage = this.getStorage();
        if (!storage) return;
        try {
            storage.setItem(this.tokenStorageKey, token);
        } catch (e) {
            console.warn("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ token:", e);
        }
    },

    // üîπ –†–∞–±–æ—Ç–∞ —Å mode
    get mode() {
        const storage = this.getStorage();
        if (!storage) return null;
        try {
            return storage.getItem(this.modeStorageKey);
        } catch (e) {
            console.warn("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è mode:", e);
            return null;
        }
    },

    set mode(mode) {
        const storage = this.getStorage();
        if (!storage) return;
        try {
            storage.setItem(this.modeStorageKey, mode);
        } catch (e) {
            console.warn("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ mode:", e);
        }
    },

    // üîπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ logout)
    clear() {
        const storage = this.getStorage();
        if (!storage) return;
        try {
            storage.removeItem(this.tokenStorageKey);
            storage.removeItem(this.modeStorageKey);
        } catch (e) {
            console.warn("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Data:", e);
        }
    }
};


$.fn._originalSerializeArray = $.fn.serializeArray;

$.fn.serializeArray = function () {
    const arr = this._originalSerializeArray();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–±–æ–∫—Å–æ–≤: –≤–∫–ª—é—á–∞–µ–º checked —Å–æ—Å—Ç–æ—è–Ω–∏—è
    this.find('input[type="checkbox"]').each(function () {
        if (!this.name || this.disabled) return;
        // –∏—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        const idx = arr.findIndex(item => item.name === this.name);
        if (idx >= 0) {
            // –µ—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ–∫–±–æ–∫—Å–æ–≤ —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º), –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
            const cur = arr[idx].value;
            if (Array.isArray(cur)) {
                // push as boolean / or as value?
            } else {
                // replace with boolean
                arr[idx].value = this.checked;
            }
        } else {
            arr.push({ name: this.name, value: this.checked });
        }
    });
    return arr;
};


let Overlay = {
    Show: function (selector, ms, callback) {
        const _selector = selector || "body";
        const _ms = ms || 300;

        let $over = $(_selector).children("overlay");

        if ($over.length === 0) {
            $over = $("<overlay>");
            $(_selector).prepend($over);
        }

        $over.stop(true).fadeTo(_ms, 0.75, function () {
            if (typeof callback === "function") callback();
        });
    },

    Hide: function (selector, ms, callback) {
        const _selector = selector || "body";
        const _ms = ms || 300;

        const $over = $(_selector).children("overlay");
        if ($over.length) {
            $over.stop(true).fadeOut(_ms, function () {
                if (typeof callback === "function") callback();
            });
        }
    },

    Text: function (text, selector) {
        const _selector = selector || "body";
        const $over = $(_selector).children("overlay");

        if ($over.length === 0) return null;

        if (text === undefined) {
            return $over.text();
        } else {
            $over.text(text);
            return $over;
        }
    }
};

let Page = null;

// --- –ö—ç—à –∫–ª–∞—Å—Å–æ–≤ –∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ ---
const PageClasses = {};
const PageInstances = {};

// --- –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü ---
// –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ pageMap –∏ PagesLink —É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω—ã (–∫–∞–∫ —É —Ç–µ–±—è)
const ShowPage = {
    // –∫—ç—à–∏
    _pageClasses: {},      // className -> class (function)
    _pageInstances: {},    // className -> instance
    _loading: {},          // className -> Promise –∑–∞–≥—Ä—É–∑–∫–∏
    current: null,         // —Ç–µ–∫—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ module (–Ω–∞–ø—Ä–∏–º–µ—Ä "overview")
     * @param {string} module
     * @param {object|null} data
     */
    async Show(module, data = null) {
        const safeData = data ?? {};
        window.Mode = safeData.mode ?? module ?? "";

        const className = (pageMap && pageMap[module]) || null;
        if (!className) {
            console.warn("ShowPage: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–æ–¥—É–ª—å:", module);
            return;
        }

        // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–∞—è
        if (Page && Page.Name !== className) {
            try { Page.Hide?.(); } catch (e) { console.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ Page.Hide():", e); }
            Page = null;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∞—Å—Å (–∏–ª–∏ –±–µ—Ä—ë–º –∏–∑ –∫—ç—à–∞)
        let PageClass = this._pageClasses[className] ?? window[className] ?? null;
        if (!PageClass) {
            PageClass = await this._loadPageClass(module, className);
            if (!PageClass) {
                console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª–∞—Å—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", className);
                return;
            }
            this._pageClasses[className] = PageClass;
        }

        // –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä (–µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç)
        /*if (!this._pageInstances[className]) {
            try {
                // –û–±—ë—Ä—Ç–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–∏–¥–∞–µ—Ç ‚Äî —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                const inst = new PageClass();
                inst.Name = className;
                this._pageInstances[className] = inst;
            } catch (e) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", e);
                return;
            }
        }*/

        // –î–µ–ª–∞–π —Ç–µ–∫—É—â–∏–º –∏ –≤—ã–∑—ã–≤–∞–π Show
        if (!Page || Page.Name !== className)
            Page = new PageClass();//this._pageInstances[className];
        try {
            Page.Show?.(module, safeData);
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Page.Show():", e);
        }
    },

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∂–¥—ë—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è window[className]
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç class (—Ñ—É–Ω–∫—Ü–∏—é/–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä) –∏–ª–∏ null
     */
    _loadPageClass(module, className) {
        // –µ—Å–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–º–∏—Å
        if (this._loading[className]) return this._loading[className];

        // –µ—Å–ª–∏ PagesLink —Å–æ–¥–µ—Ä–∂–∏—Ç URL –ø–æ module ‚Äî –±–µ—Ä—ë–º –µ–≥–æ
        const url = (PagesLink && (PagesLink[module] || PagesLink[className])) || null;
        if (!url) {
            console.error("ShowPage: –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ –≤ PagesLink –¥–ª—è:", module, className);
            return Promise.resolve(null);
        }

        const promise = new Promise((resolve) => {
            // –ï—Å–ª–∏ –∫–ª–∞—Å—Å —É–∂–µ –ø–æ—è–≤–∏–ª—Å—è –≤ window –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
            if (window[className]) {
                this._pageClasses[className] = window[className];
                resolve(window[className]);
                return;
            }

            // –°–æ–∑–¥–∞—ë–º —Ç—ç–≥ —Å–∫—Ä–∏–ø—Ç–∞
            const script = document.createElement("script");
            script.src = url;
            script.async = true;

            // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è, –Ω–æ –Ω–µ –æ–±—ä—è–≤–∏—Ç –∫–ª–∞—Å—Å ‚Äî 5s
            let timeoutId = setTimeout(() => {
                console.error("ShowPage: –∑–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∞—Å—Å–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç:", className, url);
                resolve(null);
            }, 5000);

            script.onload = () => {
                clearTimeout(timeoutId);
                if (window[className]) {
                    this._pageClasses[className] = window[className];
                    resolve(window[className]);
                } else {
                    // –¥–∞—ë–º –Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, —Ç.–∫. –∏–Ω–æ–≥–¥–∞ –∫–ª–∞—Å—Å –æ–±—ä—è–≤–ª—è—é—Ç —á—É—Ç—å –ø–æ–∑–∂–µ
                    setTimeout(() => {
                        if (window[className]) {
                            this._pageClasses[className] = window[className];
                            resolve(window[className]);
                        } else {
                            console.error("ShowPage: –∫–ª–∞—Å—Å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ window –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏:", className, url);
                            resolve(null);
                        }
                    }, 50);
                }
            };

            script.onerror = () => {
                clearTimeout(timeoutId);
                console.error("ShowPage: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞:", url);
                resolve(null);
            };

            document.head.appendChild(script);
        });

        this._loading[className] = promise;
        // –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ ‚Äî —É–¥–∞–ª—è–µ–º –∏–∑ loading, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–Ω–æ–≤–æ (–∏–ª–∏ –≤–∑—è—Ç—å –∫—ç—à)
        promise.finally(() => { delete this._loading[className]; });

        return promise;
    }
};




/** 
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–µ–∫—É–Ω–¥ –≤ —á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è
 * @param {number} sec - —Å–µ–∫—É–Ω–¥—ã
 * @param {boolean} form - —Ñ–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (true = —á–∏—Ç–∞–µ–º—ã–π)
 * @param {boolean} ms - –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
 */
function secondToTime(sec, form = true, ms = false) {
    const origSec = Number(sec);

    let remaining = sec;

    const d = Math.floor(remaining / 86400);
    remaining %= 86400;

    const h = Math.floor(remaining / 3600);
    remaining %= 3600;

    const m = Math.floor(remaining / 60);
    const s = Math.floor(remaining % 60);

    const msVal = ms ? Math.floor((origSec - Math.floor(origSec)) * 1000) : 0;

    //const msVal = ms ? Math.floor((remaining - Math.floor(remaining)) * 1000) : 0;

    if (form) {
        // –ß–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        let parts = [];
        if (d > 0) parts.push(`${d}–¥ `);
        if (h > 0 || d > 0) parts.push(`${String(h).padStart(2, '0')}—á `);
        if (m > 0 || h > 0 || d > 0) parts.push(`${String(m).padStart(2, '0')}–º `);
        parts.push(`${String(s).padStart(2, '0')}—Å`);
        if (ms) parts.push(` ${String(msVal).padStart(3, '0')}–º—Å`);
        return parts.join('');
    } else {
        // –§–æ—Ä–º–∞—Ç –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä 01:02:03.456)
        let parts = [];
        if (d > 0) parts.push(`${d} `);
        if (h > 0 || d > 0) parts.push(`${String(h).padStart(2, '0')}:`);
        if (m > 0 || h > 0 || d > 0) parts.push(`${String(m).padStart(2, '0')}:`);
        parts.push(String(s).padStart(2, '0'));
        if (ms) parts.push(`.${String(msVal).padStart(3, '0')}`);
        return parts.join('');
    }
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç timestamp (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) –≤ —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏/–¥–∞—Ç—ã.
 * @param {number} timestamp - –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (microtime(true))
 * @param {"time"|"date"|"datetime"|"timedate"} format - —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
 * @param {boolean} fullYear - false = –ø–æ–ª–Ω—ã–π –≥–æ–¥ (2025), false = –∫–æ—Ä–æ—Ç–∫–∏–π –≥–æ–¥ (25)
 * @returns {string}
 */
function formatTimestamp(timestamp, format = "time", fullYear = false) {
    const date = new Date(timestamp * 1000);
    const pad = (n) => String(n).padStart(2, "0");

    const hours = pad(date.getHours());
    const minutes = pad(date.getMinutes());
    const seconds = pad(date.getSeconds());
    const timeStr = `${hours}:${minutes}:${seconds}`;

    const day = pad(date.getDate());
    const month = pad(date.getMonth() + 1);
    let year = date.getFullYear();
    if (!fullYear) year = String(year).slice(-2);
    const dateStr = `${day}.${month}.${year}`;

    switch (format) {
        case "time": return timeStr;
        case "date": return dateStr;
        case "datetime": return `${dateStr} ${timeStr}`;
        case "timedate": return `${timeStr} ${dateStr}`;
        default: return timeStr;
    }
}


// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —Ç—ã—Å—è—á –∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
function number_format(number, decimals = 0) {
    if (!isFinite(number)) number = 0;
    return new Intl.NumberFormat('ru-RU', {
        minimumFractionDigits: decimals,
        maximumFractionDigits: decimals
    }).format(number);
}

// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ K, M, G –∏ —Ç.–¥.
function humanNumber(value, shortly = false, min = 1, forHTML = true) {
    const prefs = ["", "K", "M", "B", "T", "Q", "Q+", "S", "S+", "O", "N"];
    let steps = 0;

    // guard: ensure numeric
    value = Number(value) || 0;

    if (shortly) {
        const maxWithoutSuffix = Math.pow(10, min * 3);
        while (Math.abs(value) >= maxWithoutSuffix && steps < prefs.length - 1) {
            value /= 1000;
            steps++;
        }
    }

    let suffix = prefs[steps] || "";
    if (forHTML && suffix) suffix = " " + suffix;

    // show 2 decimals when shortened, otherwise no decimals
    const decimals = (shortly && steps > 0) ? 2 : 0;
    return number_format(value, 0) + suffix;
}

// –£–±–∏—Ä–∞–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä 1.23e+6 ‚Üí 1230000)
function removeE(num) {
    if (!Number.isFinite(num)) return String(num);
    let str = String(num);
    if (!str.includes('e')) return str;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º BigInt –¥–ª—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
    try {
        return BigInt(Math.floor(num)).toString();
    } catch {
        // fallback –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª, –≥–¥–µ BigInt –Ω–µ –Ω—É–∂–µ–Ω
        return num.toPrecision(21).replace(/\.?0+$/, '');
    }
}


class TimerController {
    /**
     * –°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–π–º–µ—Ä –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ
     * @param {HTMLElement} element - —ç–ª–µ–º–µ–Ω—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω —Ç–∞–π–º–µ—Ä
     * @param {number} milliseconds - –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     * @param {object} options - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–µ—Ä–∞
     */
    constructor(element, milliseconds, options = {}) {
        // –ï—Å–ª–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ —É–∂–µ –µ—Å—Ç—å —Ç–∞–π–º–µ—Ä ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º
        if (element._timerController instanceof TimerController) {
            element._timerController.updateSettings(milliseconds, options);
            return element._timerController;
        }

        this.element = element;
        this.milliseconds = milliseconds;

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        this.form = options.form ?? true;
        this.ms = options.ms ?? false;
        this.template = options.template || "{time}";
        this.onTick = options.onTick || null;
        this.onEnd = options.onEnd || null;
        this.formatter = options.formatter || null;
        this.startTime = Date.now();
        this.endTime = this.startTime + milliseconds;
        this._isActive = true;

        // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —ç–ª–µ–º–µ–Ω—Ç—É
        element._timerController = this;

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–µ
        TimerController._register(this);

        // –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        //this._updateDisplay();
    }

    /** –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */
    updateSettings(milliseconds, options = {}) {
        if (milliseconds !== undefined) {
            this.milliseconds = milliseconds;
            this.startTime = Date.now();
            this.endTime = this.startTime + milliseconds;
        }

        if (options.form !== undefined) this.form = options.form;
        if (options.ms !== undefined) this.ms = options.ms;
        if (options.template !== undefined) this.template = options.template;
        if (options.onTick !== undefined) this.onTick = options.onTick;
        if (options.onEnd !== undefined) this.onEnd = options.onEnd;
        if (options.formatter !== undefined) this.formatter = options.formatter;

        this._updateDisplay();
    }

    /** –°–±—Ä–æ—Å —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º */
    reset(milliseconds) {
        this.startTime = Date.now();
        this.milliseconds = milliseconds;
        this.endTime = this.startTime + milliseconds;
        this._isActive = true;
        this._updateDisplay();
    }

    /** –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä */
    stop() {
        this._isActive = false;
        TimerController._unregister(this);
    }

    /** –°–∫–æ–ª—å–∫–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –æ—Å—Ç–∞–ª–æ—Å—å */
    getRemainingMilliseconds() {
        return Math.max(0, this.endTime - Date.now());
    }

    /** –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ç–∏–∫ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–±—ã—Ç–∏–∏ GameTick) */
    _tick() {
        if (!this._isActive) return;

        const remainingMs = this.getRemainingMilliseconds();

        this._updateDisplay();

        if (this.onTick) this.onTick(remainingMs, this.element);

        if (remainingMs <= 0) {
            this._isActive = false;
            TimerController._unregister(this);
            if (this.onEnd) this.onEnd(this.element);
        }
    }

    /** –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è */
    _updateDisplay() {
        const remainingMs = this.getRemainingMilliseconds();
        const remainingSec = remainingMs / 1000;

        let timeStr = this.formatter
            ? this.formatter(remainingSec)
            : secondToTime(remainingSec, this.form, this.ms);

        const output = this.template.replace("{time}", timeStr);

        if (this.element.tagName === "INPUT" || this.element.tagName === "BUTTON") {
            this.element.value = output;
        } else {
            this.element.textContent = output;
        }
    }

    // === STATIC ===

    /** –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ */
    static _timers = new Set();

    /** –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ç–∞–π–º–µ—Ä */
    static _register(timer) {
        this._timers.add(timer);
    }

    /** –£–¥–∞–ª—è–µ—Ç —Ç–∞–π–º–µ—Ä */
    static _unregister(timer) {
        this._timers.delete(timer);
    }

    /** –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º GameTick */
    static _onGameTick() {
        for (const timer of this._timers) {
            timer._tick();
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–≥—Ä–æ–≤–æ–π —Ç–∏–∫
document.addEventListener("GameTick", () => TimerController._onGameTick());

class ServerTime {
    constructor() {
        this.serverMicrotime = 0;  // –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ microtime(true) —Å —Å–µ—Ä–≤–µ—Ä–∞
        this.localTimestamp = 0;   // –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (Date.now()/1000) –≤ –º–æ–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω–∏—è
        this.offset = 0;           // –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–æ–º –∏ –∫–ª–∏–µ–Ω—Ç–æ–º (—Å–µ–∫—É–Ω–¥—ã)
        this.displayElement = null;
        this.updateInterval = null;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
     * @param {number} serverMicrotime - –≤—Ä–µ–º—è —Å —Å–µ—Ä–≤–µ—Ä–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö, float)
     */
    update(serverMicrotime) {
        this.serverMicrotime = serverMicrotime;
        this.localTimestamp = Date.now() / 1000;
        this.offset = serverMicrotime - this.localTimestamp;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
     */
    now() {
        return (Date.now() / 1000) + this.offset;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤ –≤–∏–¥–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
     */
    getFormattedTime() {
        return formatTimestamp(this.now(), 'timedate');
        const date = new Date(this.now() * 1000);


        const h = String(date.getHours()).padStart(2, "0");
        const m = String(date.getMinutes()).padStart(2, "0");
        const s = String(date.getSeconds()).padStart(2, "0");
        return `${h}:${m}:${s}`;
    }


    createDisplay() {
        this.displayElement = document.createElement("div");
        this.displayElement.classList.add("server-time");
        this.displayElement.style.cssText = `
            position: absolute;
            top: 10px;
            right: 20px;
            font-family: monospace;
            color: #8af;
            background: rgba(0, 0, 0, 0.3);
            padding: 4px 8px;
            border-radius: 6px;
        `;
        document.body.appendChild(this.displayElement);

    }
    /**
     * –°–æ–∑–¥–∞–µ—Ç DOM —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
     */
    renderDisplay() {

        if (!this.displayElement) this.createDisplay();

        this.displayElement.textContent = this.getFormattedTime();

        this.updateInterval = setInterval(() => {
            this.displayElement.textContent = this.getFormattedTime();
        }, 1000);
    }
}

class GameEventsClass extends EventTarget {
    emit(name, detail = {}) {
        var event = $.Event(name, { detail });
        $(this).trigger(event);
        return this;
    }

    on(name, callback) {
        $(this).on(name, callback);
        //this.addEventListener(name, callback);
        return this;
    }

    off(name, callback) {
        if (callback)
            $(this).off(name, callback);
        else
            $(this).off(name);
        return this;
    }
}

class Message {
    constructor(raw = null) {
        if (raw) {
            this.status = raw.status || 'ok';
            this.requestId = raw.requestId || Message.generateRequestId();
            this.token = raw.token || '';
            this.mode = raw.mode || '';
            this.action = raw.action || '';
            this.lang = raw.lang || '';
            this.serverTime = raw.serverTime || 0;
            this.data = raw.data || {};
            this.error = raw.error || { code: '', message: '' };
        } else {
            this.status = 'ok';
            this.requestId = Message.generateRequestId();
            this.token = '';
            this.mode = '';
            this.action = '';
            this.lang = '';
            this.serverTime = 0;
            this.data = {};
            this.error = { code: '', message: '' };
        }

    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ requestId (UUID v4)
    static generateRequestId() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            const r = Math.random() * 16 | 0;
            const v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }

    setToken(token) {
        this.token = token;
        return this;
    }

    setMode(mode) {
        this.mode = mode;
        return this;
    }

    setAction(action) {
        this.action = action;
        return this;
    }

    setData(key, value) {
        this.data[key] = value;
        return this;
    }

    clearData() {
        this.data = {};
        return this;
    }

    setError(code, message) {
        this.status = 'error';
        this.error.code = code;
        this.error.message = message;
        return this;
    }

    getData(key, defaultValue = null) {
        return this.data.hasOwnProperty(key) ? this.data[key] : defaultValue;
    }

    toJSON() {
        const obj = {
            status: this.status,
            requestId: this.requestId
        };
        if (this.token) obj.token = this.token;
        if (this.mode) obj.mode = this.mode;
        if (this.action) obj.action = this.action;
        if (this.lang) obj.lang = this.lang;
        if (Object.keys(this.data).length > 0) obj.data = this.data;
        if (this.status === 'error') obj.error = this.error;
        return obj;
    }

    toString() {
        return JSON.stringify(this.toJSON());
    }
}

class PingService {
    constructor(wsInstance) {
        this.ws = wsInstance;          // —Å—Å—ã–ª–∫–∞ –Ω–∞ WebSocketClass
        this.samples = [];              // –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        this.maxSamples = 10;           // —Å–∫–æ–ª—å–∫–æ —Ö—Ä–∞–Ω–∏—Ç—å
        this.lastPingTime = null;       // –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏–Ω–≥–∞
        this.interval = null;           // ID —Ç–∞–π–º–µ—Ä–∞
        this.currentPing = null;        // –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        this.listeners = [];            // –ø–æ–¥–ø–∏—Å—á–∏–∫–∏
    }

    // üîπ –ó–∞–ø—É—Å–∫ –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–∏–Ω–≥–∞
    start(periodMs = 10000) {
        this.stop();
        this._sendPing(); // –ø–µ—Ä–≤—ã–π —Å—Ä–∞–∑—É
        this.interval = setInterval(() => this._sendPing(), periodMs);
    }

    // üîπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞
    stop() {
        if (this.interval) clearInterval(this.interval);
        this.interval = null;
    }

    // üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ ping –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    _sendPing() {
        if (!this.ws || this.ws.ws.readyState !== WebSocket.OPEN) return;
        this.lastPingTime = performance.now();
        this.ws.send(new Message().setMode("connect").setAction("ping"));
    }

    // üîπ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (pong)
    onPong() {
        if (!this.lastPingTime) return;

        const now = performance.now();
        const ping = Math.round(now - this.lastPingTime);
        this.lastPingTime = null;

        this.currentPing = ping;
        this.samples.push(ping);
        if (this.samples.length > this.maxSamples) this.samples.shift();

        const avg = this.averagePing();

        // –≤—ã–≤–æ–¥ –≤ –ª–æ–≥


        // —É–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π
        this.listeners.forEach(cb => cb(ping, avg));
    }

    // üîπ –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    averagePing() {
        if (this.samples.length === 0) return 0;
        const sum = this.samples.reduce((a, b) => a + b, 0);
        return Math.round(sum / this.samples.length);
    }

    // üîπ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∏–Ω–≥–∞
    onUpdate(callback) {
        this.listeners.push(callback);
    }
}

class WebSocketClass {

    reconnect = false;

    constructor(url = "wss://spserver.snak84.ru") {

        this.url = url;

        this.token = null;
        this.ws = null;

        this.heartbeatInterval = null;
        this.reconnectTimeout = null;
        this.reconnectDelay = 5000;

        this.sendPing = 0;

        this.messageQueue = []; // –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –æ–±—Ä—ã–≤–µ

        // ‚úÖ –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å –ø–∏–Ω–≥–∞
        this.pingService = new PingService(this);
        this.pingService.onUpdate((ping, avg) => {
            //console.log(`%cüì° Ping: ${ping} ms (avg ${avg} ms)`, "color: limegreen");
            $("#ping-indicator").text(`üì°${ping} ms (${avg} ms)`);
        });

        this.connect();

        GameEvents.on("SendServer", (e) => {
            const { mode, action, NotOverlay, data } = e.detail;
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Overlay, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ ping/handshake/reconnect
            if (mode !== "connect" && action !== "ping" && action !== "handshake" && action !== "reconnect" && !NotOverlay) {
                Overlay.Show(null, 250, () => this.Submit(mode, action, data));
                //this.waitOverlayAction = hide || action; // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º, –ø—Ä–∏ –∫–∞–∫–æ–º action –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç—å
            } else
                this.Submit(mode, action, data);
        });
    }

    connect() {
        if (this.ws && (this.ws.readyState === WebSocket.OPEN || this.ws.readyState === WebSocket.CONNECTING)) {
            console.log("WS —É–∂–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è/–ø–æ–¥–∫–ª—é—á–µ–Ω");
            return;
        }

        console.log("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É:", this.url);
        this.ws = new WebSocket(this.url);

        this.ws.onopen = () => {
            console.log("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

            // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º queued —Å–æ–æ–±—â–µ–Ω–∏—è
            this.flushQueue();

            this.send(new Message()
                .setMode((this.reconnect) ? Data.mode : "connect")
                .setAction((this.reconnect) ? "reconnect" : "handshake")
            );
            this.reconnect = false;

            // üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–∏–Ω–≥–∞
            this.pingService.start(1000); // –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥

        };

        this.ws.onmessage = (event) => {
            let msg;
            try {
                msg = new Message(JSON.parse(event.data));
                //console.log("üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", JSON.parse(event.data));
            } catch (err) {
                console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö", event.data, err);
                return;
            }

            if (msg.serverTime) GameServerTime.update(msg.serverTime);

            if (msg.status === 'ok' && msg.token) {
                Data.token = msg.token;
            }

            this.handleMessage(msg);
        };

        this.ws.onerror = (error) => {
            console.error("‚ùå –û—à–∏–±–∫–∞ WebSocket:", error && (error.message || error) || error);
        };

        this.ws.onclose = (event) => {
            console.warn("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ:", event.code, event.reason);

            clearInterval(this.heartbeatInterval);
            this.heartbeatInterval = null;


            Overlay.Show();
            // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            this.reconnectTimeout = setTimeout(() => {
                this.reconnect = true;
                console.log("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...");
                this.connect();
            }, this.reconnectDelay);
        };

    }

    send(msg) {
        if (!(msg instanceof Message)) {
            msg = new Message(msg);
        }

        if (Data.token) {
            msg.setToken(Data.token);
        }

        if (msg.mode !== "connect" && msg.action !== "ping" && msg.action !== "handshake" && msg.action !== "reconnect")
            console.log("send(msg) ", msg);

        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            if (msg.mode !== "connect")
                console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞:", msg.toJSON());
            this.ws.send(msg.toString());
        } else {
            if (msg.mode !== "connect")
                console.log("üì¶ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å:", msg.toJSON());
            this.messageQueue.push(msg);
        }

    }

    flushQueue() {
        if (this.messageQueue.length > 0) {
            console.log(`üöö –û—Ç–ø—Ä–∞–≤–∫–∞ ${this.messageQueue.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏`);
            this.messageQueue.forEach(msg => this.send(msg));
            this.messageQueue = [];
        }
    }

    Submit(mode, action, data) {
        const msg = new Message()
            .setMode(mode)
            .setAction(action);

        $.each(data, (name, value) => {
            msg.setData(name, value);
        });

        this.send(msg);
    }

    handleMessage(msg) {

        // --- SYSTEM RESPONSES (connect namespace) --- //
        if (msg.mode === "connect") {
            switch (msg.action) {
                case "ping":
                    // –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∏–Ω–≥ –∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Å Overlay
                    this.pingService.onPong();
                    return;

                case "handshake":
                    // —Å–∏—Å—Ç–µ–º–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ (re)connect ‚Äî –ø—Ä—è—á–µ–º overlay
                    console.log("Overlay.Hide() on handshake/reconnect");
                    //Overlay.Hide();
                    GameEvents.emit("SendServer", {
                        mode: Data.mode,
                        //action: "list",
                        //data: {}
                    });
                    return;
                case "reconnect":
                    // —Å–∏—Å—Ç–µ–º–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ (re)connect ‚Äî –ø—Ä—è—á–µ–º overlay
                    console.log("Overlay.Hide() on handshake/reconnect");
                    Overlay.Hide();
                    return;
            }
        }

        console.log("handleMessage", msg);

        if (msg.lang) {//} && msg.mode !== "login") {
            console.log("üåç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —è–∑—ã–∫:", msg.lang);
            Lang.setLang(msg.lang);
        }
        // --- SERVER TIME SYNC --- //
        if (msg.serverTime) {
            try { GameServerTime.update(msg.serverTime); } catch (e) { /* silent */ }
        }

        // --- TOKEN UPDATE (–±–µ–∑ –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤) --- //
        if (msg.status === "ok" && msg.token) {
            Data.token = msg.token;
            console.log("üîë Token –æ–±–Ω–æ–≤–ª—ë–Ω");
        }

        // --- LANG: —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –Ω–∞–±–æ—Ä –ø–µ—Ä–µ–≤–æ–¥–æ–≤ --- //
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å lang
        if (msg.mode === "lang" && msg.action === "get") {
            // –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª { lang: "ru", texts: {...} }
            try {
                Lang.setServerLang(msg.lang, msg.getData("texts"));
                console.log("üåç –ó–∞–≥—Ä—É–∂–µ–Ω —è–∑—ã–∫–æ–≤–æ–π —Ñ–∞–π–ª –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", msg.lang);
            } catch (e) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ server lang:", e);
            }
            // –µ—Å–ª–∏ –º—ã –∂–¥–∞–ª–∏ Overlay –ø–æ —ç—Ç–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é ‚Äî —Å–ø—Ä—è—á–µ–º
            //if (this.waitOverlayAction && this.waitOverlayAction === msg.action) {
            //Overlay.Hide();
            //   this.waitOverlayAction = null;
            //}
            return;
        }



        // --- ERROR HANDLING --- //
        if (msg.status === "error") {
            try { Overlay.Hide(); } catch (e) { }
            if (msg.error?.code === "missing_token" || msg.error?.code === "108") {
                console.warn("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", msg.error);
                msg.mode = "login";
            } else {
                Dialog.ErrorLoad(`${msg.error?.code}: ${msg.error?.message}`);
            }
        }



        // --- HIDE OVERLAY LOGIC –ø–æ —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –æ–∂–∏–¥–∞–Ω–∏—é --- //
        /*if (this.waitOverlayAction && msg.action === this.waitOverlayAction) {
            try { Overlay.Hide(); } catch (e) { }
            this.waitOverlayAction = null;
        }*/

        // --- LANGUAGE TAG IN NON-LANG MESSAGES: —Ç–æ–ª—å–∫–æ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ñ–∞–π–ª ---
        // –ù–ï –≤—ã–∑—ã–≤–∞–µ–º LANG_MANAGER.setLang() —Ç—É—Ç (—ç—Ç–æ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ç–ª—é).
        if (msg.lang && Lang.currentLang !== msg.lang) {
            Lang.setLang(msg.lang);
            console.log("üåç –ò–∑–º–µ–Ω—ë–Ω —è–∑—ã–∫ –Ω–∞:", Lang.currentLang);
        }

        // --- ROUTING TO PAGES (–Ω–µ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–æ–¥–æ–≤) --- //
        if (msg.mode && msg.action !== "ping" && msg.mode !== "connect" && msg.mode !== "lang") {
            // –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º—ã —É–∂–µ –æ–±–Ω–æ–≤–∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π lang (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
            ShowPage.Show(msg.mode, msg);
            return;
        }

    }


}

let isTouch;
$(document).ready(() => {
    isTouch = 'ontouchstart' in window || navigator.maxTouchPoints > 0;

    window.Lang = new Proxy(new LangManager(), {
        get(target, prop) {
            if (typeof prop === 'string') {
                // –µ—Å–ª–∏ —Å–≤–æ–π—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É –æ–±—ä–µ–∫—Ç–∞ ‚Äî –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ
                if (prop in target) return target[prop];
                // –∏–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
                return target.t(prop);
            }
            return target[prop];
        }
    });


    window.GameEvents = new GameEventsClass();
    window.GameServerTime = new ServerTime();

    window.WS = new WebSocketClass();

    document.addEventListener('mouseup', (e) => {
        if (!Page.$LeftMenu[0].contains(e.target) && !$("#MenuBtn")[0].contains(e.target)) {
            Page.$LeftMenu.removeClass("menu_open");
            $("#MenuBtn").removeClass("menu-open");
            $("#MenuBtn").ToolTip('–ü–æ–∫–∞–∑–∞—Ç—å –ú–µ–Ω—é');
        }
    });

});


