class ToolTipClass {
	static $Tip = null;   // общий <tool-tip>

	fade = 100;
	fadeRun = false;
	fadeOut = false;

	parent = null;
	content = null;
	css = {};

	resizeObserver = null;
	mutationObserver = null;

	constructor() {
		if (!this.$Tip) {
			this.$Tip = $("<tool-tip>").addClass("tip").hide();
			$("body").append(this.$Tip);
		}

		this.initResizeObserver();
		this.initMutationObserver();
		this.updatePositionOnResize();
	}

	// --- Навешивание событий ---
	bindEvents(object) {
		if (object === this.parent) this.Render(object, true);
		if ($(object).data('tooltip-bound')) return;
		$(object).data('tooltip-bound', true);

		const isTouch = 'ontouchstart' in window || navigator.maxTouchPoints > 0;

		if (isTouch) {
			// --- Мобильный вариант (двойной тап) ---
			$(object).off("click.tooltip").on("click.tooltip", (e) => {
				// если tooltip уже открыт на этом объекте → выполнить действие
				if (this.$Tip.is(":visible") && this.parent === e.currentTarget) {
					this.hide();
					return true; // разрешаем нормальный клик
				}

				e.preventDefault();
				e.stopPropagation();

				this.parent = e.currentTarget;
				this.Render(this.parent, false, e);
				this.setPosition(e);

				if (!this.fadeRun) {
					this.fadeRun = true;
					this.$Tip.fadeIn(this.fade, () => {
						this.fadeRun = false;
						this.setPosition(e);
					});
				}

				$(document).one("click.tooltip", () => this.hide());
				return false; // блокируем первый тап
			});
		} else {
			// --- Десктоп ---
			$(object)
				.off("mouseenter.tooltip").on("mouseenter.tooltip", (e) => this.show(e))
				.off("mousemove.tooltip").on("mousemove.tooltip", (e) => this.move(e))
				.off("mouseleave.tooltip").on("mouseleave.tooltip", () => this.hide());
		}
	}

	// --- Обновление контента ---
	RenderText(newContent) {
		if (newContent instanceof jQuery || newContent instanceof HTMLElement) {
			this.$Tip.empty().append(newContent);
		} else {
			this.$Tip.html(newContent ?? "");
		}

		this.setCss();
		this.setPosition();
	}

	// --- Обновление tooltip для элемента ---
	Render(parent, fast = false, e = null) {
		if (!parent) return;

		const newContent = $(parent).data('tooltip');
		if (!newContent) return;

		this.css = $(parent).data('tooltip-css');
		const currentContent = this.$Tip.contents().toArray();
		let changed = false;

		if (newContent instanceof jQuery || newContent instanceof HTMLElement) {
			changed = !$(currentContent).is(newContent);
		} else if (typeof newContent === "string") {
			changed = this.$Tip.html() !== newContent;
		}

		if (!changed) {
			this.setCss();
			return;
		}

		this.fadeOut = true;
		this.fadeRun = true;

		if (fast) {
			this.RenderText(newContent);
		} else {
			this.$Tip.fadeOut(this.fade, () => {
				this.fadeOut = false;
				this.RenderText(newContent);
				this.$Tip.fadeIn(this.fade, () => {
					this.fadeRun = false;
					if (e) this.setPosition(e);
				});
			});
		}
	}

	show(e) {
		this.parent = e.target;
		this.Render(this.parent, false, e);
		this.setPosition(e);

		if (!this.fadeRun) {
			this.fadeRun = true;
			this.$Tip.fadeIn(this.fade, () => {
				this.fadeRun = false;
				this.setPosition(e);
			});
		} else this.setPosition(e);
	}

	move(e) {
		this.Render(this.parent, false, e);
		this.setPosition(e);
	}

	hide() {
		this.fadeOut = true;
		this.$Tip.stop(true, true).fadeOut(this.fade, () => {
			this.fadeOut = false;
		});
	}

	// --- Автоматическое позиционирование ---
	setPosition(e = null) {
		if (!this.parent) return;

		const $target = $(this.parent);
		const targetOffset = $target.offset();
		const targetWidth = $target.outerWidth();
		const targetHeight = $target.outerHeight();

		const $tip = this.$Tip;
		const isTouch = 'ontouchstart' in window || navigator.maxTouchPoints > 0;

		let top, left;

		if (isTouch) {
			// Мобильный вариант — над элементом по центру
			top = targetOffset.top - $tip.outerHeight() - 10;
			left = targetOffset.left + (targetWidth / 2) - ($tip.outerWidth() / 2);
		} else if (e) {
			// Десктоп — у курсора
			top = e.pageY + 15;
			left = e.pageX + 15;
		} else {
			top = targetOffset.top - $tip.outerHeight() - 10;
			left = targetOffset.left + (targetWidth / 2) - ($tip.outerWidth() / 2);
		}

		// Корректировка
		const adjustPosition = () => {
			const winW = $(window).width();
			const winH = $(window).height();
			const scrollTop = $(window).scrollTop();
			const scrollLeft = $(window).scrollLeft();

			let newTop = top;
			let newLeft = left;

			const tipW = $tip.outerWidth();
			const tipH = $tip.outerHeight();

			if (newLeft + tipW > winW + scrollLeft - 10)
				newLeft = winW + scrollLeft - tipW - 10;
			if (newLeft < scrollLeft + 10)
				newLeft = scrollLeft + 10;

			if (newTop < scrollTop + 10)
				newTop = targetOffset.top + targetHeight + 10;
			if (newTop + tipH > winH + scrollTop - 10)
				newTop = winH + scrollTop - tipH - 10;

			return { newTop, newLeft };
		};

		$tip.css({ top, left });
		setTimeout(() => {
			const { newTop, newLeft } = adjustPosition();
			$tip.css({ top: newTop, left: newLeft });
		}, 0);
	}

	setCss() {
		const keep = ["opacity", "display", "left", "top"];
		const styles = this.$Tip[0].style;
		for (let i = styles.length - 1; i >= 0; i--) {
			const prop = styles[i];
			if (!keep.includes(prop)) {
				this.$Tip.css(prop, "");
			}
		}
		if (this.css) this.$Tip.css(this.css);
	}

	// --- Автопозиция при resize ---
	updatePositionOnResize() {
		$(window).off("resize.tooltip").on("resize.tooltip", () => {
			if (this.$Tip.is(":visible")) this.setPosition();
		});
	}

	// --- Отслеживание изменений размеров tooltip ---
	initResizeObserver() {
		if (this.resizeObserver) this.resizeObserver.disconnect();

		this.resizeObserver = new ResizeObserver(() => {
			if (this.$Tip.is(":visible")) this.setPosition();
		});

		this.resizeObserver.observe(this.$Tip[0]);
	}

	// --- Отслеживание изменений контента tooltip ---
	initMutationObserver() {
		if (this.mutationObserver) this.mutationObserver.disconnect();

		this.mutationObserver = new MutationObserver(() => {
			if (this.$Tip.is(":visible")) this.setPosition();
		});

		this.mutationObserver.observe(this.$Tip[0], {
			childList: true,
			subtree: true,
			characterData: true
		});
	}
}

window.ToolTip = new ToolTipClass();

// jQuery-обёртка
$.fn.ToolTip = function (content, css = null) {
	return this.each(function () {
		$(this).data("tooltip", content);
		$(this).data("tooltip-css", css);
		ToolTip.bindEvents(this);
	});
};

