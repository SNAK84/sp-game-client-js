// ============================
// Базовый Tooltip
// ============================
class ToolTipBase extends HTMLElement {
    parent = null;
    button = null;

    constructor() {
        super();
        this.style.position = 'absolute';
        this.style.display = 'none';
        this.style.pointerEvents = 'none';
        this.style.zIndex = 9999;
        this.style.background = 'rgba(0,0,0,0.85)';
        this.style.color = '#fff';
        this.style.padding = '6px 12px';
        this.style.borderRadius = '6px';
        this.style.fontSize = '12px';
        this.style.transition = 'opacity 0.15s';
        this.style.opacity = '0';
        this.style.maxWidth = '300px';
        this.style.wordBreak = 'break-word';
        this.style.boxShadow = '0 2px 6px rgba(0,0,0,0.3)';
    }

    setParent(parent) {
        this.parent = parent;
        this.update();
        this.style.display = 'block';
        requestAnimationFrame(() => this.style.opacity = '1');
    }

    unsetParent() {
        this.parent = null;
        this.style.opacity = '0';
        setTimeout(() => this.style.display = 'none', 150);
    }

    update() {
        if (this.parent) {
            const text = this.parent.getAttribute(this.tooltipAttr) || '';
            this.innerHTML = text + (this.button ? '<br>' + this.button : '');
        }
    }

    setButton(buttonHtml) {
        this.button = buttonHtml;
        this.update();
    }

    setPosition(e) {
        if (!this.parent) return;
        let mouseX = e.pageX + 20;
        let mouseY = e.pageY + 20;

        const tipWidth = this.offsetWidth;
        const tipHeight = this.offsetHeight;
        const docWidth = document.documentElement.clientWidth;
        const docHeight = document.documentElement.clientHeight;

        if (mouseX + tipWidth > docWidth - 10) mouseX = e.pageX - tipWidth - 20;
        if (mouseY + tipHeight > docHeight - 10) mouseY = e.pageY - tipHeight - 20;

        if (mouseX < 10) mouseX = 10;
        if (mouseY < 10) mouseY = 10;

        this.style.left = mouseX + 'px';
        this.style.top = mouseY + 'px';
    }
}

// ============================
// Обычный Tooltip
// ============================
class ToolTip extends ToolTipBase {
    tooltipAttr = 'tooltip';
}

// ============================
// Sticky Tooltip
// ============================
class MToolTip extends ToolTipBase {
    tooltipAttr = 'tooltip_sticky';
    constructor() {
        super();
        this.style.pointerEvents = 'auto';
    }

    setPosition(e) {
        if (!this.parent) return;
        const mouseX = e.pageX - this.offsetWidth / 2;
        const mouseY = e.pageY - this.offsetHeight / 2;

        this.style.left = Math.max(mouseX, 0) + 'px';
        this.style.top = Math.max(mouseY, 0) + 'px';
    }
}

customElements.define('tool-tip', ToolTip);
customElements.define('m-tool-tip', MToolTip);

// ============================
// Инициализация
// ============================
const tooltip = document.createElement('tool-tip');
document.body.appendChild(tooltip);

const stickyTip = document.createElement('m-tool-tip');
document.body.appendChild(stickyTip);

// ============================
// Управление через jQuery
// ============================
$(document).ready(function () {
    $("body").on('mouseenter', '[tooltip]', function (e) {
        tooltip.setParent(this);
        tooltip.setPosition(e);
    });

    $("body").on('mouseleave', '[tooltip]', function () {
        tooltip.unsetParent();
    });

    $("body").on('mousemove', '[tooltip]', function (e) {
        tooltip.setPosition(e);
    });

    $("body").on('mouseenter', '[tooltip_sticky]', function (e) {
        stickyTip.setParent(this);
        stickyTip.setPosition(e);
    });

    $("body").on('mouseleave', '[tooltip_sticky]', function () {
        stickyTip.unsetParent();
    });

    $("body").on('mousemove', '[tooltip_sticky]', function (e) {
        stickyTip.setPosition(e);
    });
});

// ============================
// jQuery плагин ToolTip
// ============================
(function ($) {
    $.fn.ToolTip = function (text, sticky = false, buttonHtml = null) {
        const tip = sticky ? window.stickyTip : window.tooltip;

        this.each(function () {
            $(this).attr(sticky ? 'tooltip_sticky' : 'tooltip', text);

            // Показываем тултип прямо над элементом
            tip.setParent(this);
            tip.setButton(buttonHtml);

            // Позиция: если sticky, центрируем на элементе
            const rect = this.getBoundingClientRect();
            const e = { pageX: rect.left + rect.width / 2, pageY: rect.top + rect.height / 2 };
            tip.setPosition(e);
        });

        return this; // поддержка цепочек
    };
})(jQuery);
